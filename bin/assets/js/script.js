// Generated by CoffeeScript 1.7.1
(function() {
  var Ball, Computer, Lscore, Paddle, Player, Rscore, animate, ball, canvas, computer, context, height, move, player, render, scoreBoard, step, width;

  canvas = document.getElementById("canvas");

  width = 640;

  height = 480;

  canvas.width = width;

  canvas.height = height;

  context = canvas.getContext("2d");

  Lscore = 0;

  Rscore = 0;

  scoreBoard = document.getElementById('score');

  scoreBoard.innerText = "" + Lscore + " - " + Rscore;

  Paddle = function(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    return this.y_speed = 0;
  };

  Paddle.prototype.render = function() {
    context.fillStyle = 'white';
    return context.fillRect(this.x, this.y, this.width, this.height);
  };

  Paddle.prototype.goUp = function() {
    this.y_speed -= 1;
    if (this.y_speed < -5) {
      return this.y_speed = -5;
    }
  };

  Paddle.prototype.goDown = function() {
    this.y_speed += 1;
    if (this.y_speed > 5) {
      return this.y_speed = 5;
    }
  };

  Paddle.prototype.move = function() {
    this.y += this.y_speed;
    if (this.y < 0) {
      this.y = 0;
      return this.y_speed = 0;
    } else if (this.y > canvas.height - this.height) {
      this.y = canvas.height - this.height;
      return this.y_speed = 0;
    }
  };

  Player = function() {
    return this.paddle1 = new Paddle(10, canvas.height / 2 - 50, 10, 100);
  };

  Computer = function() {
    return this.paddle2 = new Paddle(620, canvas.height / 2 - 50, 10, 100);
  };

  Player.prototype.render = function() {
    return this.paddle1.render();
  };

  Computer.prototype.render = function() {
    return this.paddle2.render();
  };

  Ball = function(x, y) {
    this.x = x;
    this.y = y;
    this.radius = 7;
    this.x_speed = -3;
    return this.y_speed = Math.floor(Math.random() * 7) + -3;
  };

  Ball.prototype.move = function() {
    var bottom_wall, left_wall, right_wall, top_wall;
    console.log("Player x,y: " + player.x + "," + player.y);
    console.log("Computer x,y: " + computer.x + "," + computer.y);
    this.x += this.x_speed;
    this.y += this.y_speed;
    left_wall = this.x - this.radius;
    right_wall = this.x + this.radius;
    top_wall = this.y - this.radius;
    bottom_wall = this.y + this.radius;
    if (top_wall < 0) {
      this.y = this.radius;
      this.y_speed = -this.y_speed;
    } else if (bottom_wall > canvas.height) {
      this.y = canvas.height - this.radius;
      this.y_speed = -this.y_speed;
    } else if (left_wall < 0) {
      Rscore += 1;
      scoreBoard.innerText = "" + Lscore + " - " + Rscore;
      this.x = canvas.width / 2;
      this.y = canvas.height / 2;
      this.x_speed = 3;
      this.y_speed = Math.floor(Math.random() * 7) + -3;
    } else if (right_wall > canvas.width) {
      Lscore += 1;
      scoreBoard.innerText = "" + Lscore + " - " + Rscore;
      this.x = canvas.width / 2;
      this.y = canvas.height / 2;
      this.x_speed = -3;
      this.y_speed = Math.floor(Math.random() * 7) + -3;
    }
    if (Lscore === 11) {
      document.getElementById('winner').innerText = "Player 1 wins! Refresh to play again.";
      this.x_speed = 0;
      return this.y_speed = 0;
    } else if (Rscore === 11) {
      document.getElementById('winner').innerText = "Computer wins! Refresh to play again.";
      this.x_speed = 0;
      return this.y_speed = 0;
    }
  };

  Ball.prototype.render = function() {
    context.beginPath();
    context.arc(this.x, this.y, this.radius, 2 * Math.PI, false);
    context.fillStyle = 'white';
    return context.fill();
  };

  player = new Player;

  computer = new Computer;

  ball = new Ball(canvas.width / 2, canvas.height / 2);

  render = function() {
    context.fillStyle = "#000";
    context.fillRect(0, 0, width, height);
    player.render();
    computer.render();
    return ball.render();
  };

  animate = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };

  move = function() {
    player.move();
    computer.move();
    return ball.move();
  };

  step = function() {
    move();
    render();
    return animate(step);
  };

  window.addEventListener('keydown', function(event) {
    if (event.keyCode === 38) {
      return player.goUp();
    } else if (event.keyCode === 40) {
      return player.goDown();
    }
  });

  window.onload = function() {
    return animate(step);
  };

}).call(this);
