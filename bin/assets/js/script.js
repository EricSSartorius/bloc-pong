// Generated by CoffeeScript 1.7.1
(function() {
  var Ball, Computer, Paddle, Player, animate, ball, canvas, computer, context, height, move, player, render, step, width;

  canvas = document.getElementById("canvas");

  width = 640;

  height = 480;

  canvas.width = width;

  canvas.height = height;

  context = canvas.getContext("2d");

  Paddle = function(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    return this.y_speed = 0;
  };

  Paddle.prototype.render = function() {
    context.fillStyle = 'white';
    return context.fillRect(this.x, this.y, this.width, this.height);
  };

  Paddle.prototype.goUp = function() {
    this.y_speed -= 1;
    if (this.y_speed < -5) {
      return this.y_speed = -5;
    }
  };

  Paddle.prototype.goDown = function() {
    this.y_speed += 1;
    if (this.y_speed > 5) {
      return this.y_speed = 5;
    }
  };

  Paddle.prototype.move = function() {
    this.y += this.y_speed;
    if (this.y < 0) {
      this.y = 0;
      return this.y_speed = 0;
    } else if (this.y > canvas.height - this.height) {
      this.y = canvas.height - this.height;
      return this.y_speed = 0;
    }
  };

  Player = function() {
    return this.paddle = new Paddle(10, 30, 10, 100);
  };

  Computer = function() {
    return this.paddle = new Paddle(620, 30, 10, 100);
  };

  Player.prototype.render = function() {
    return this.paddle.render();
  };

  Computer.prototype.render = function() {
    return this.paddle.render();
  };

  Ball = function(x, y) {
    this.x = x;
    this.y = y;
    return this.radius = 10;
  };

  Ball.prototype.render = function() {
    context.beginPath();
    context.arc(this.x, this.y, this.radius, 2 * Math.PI, false);
    context.fillStyle = 'white';
    return context.fill();
  };

  player = new Player;

  computer = new Computer;

  ball = new Ball(canvas.width / 4, canvas.height / 3);

  render = function() {
    context.fillStyle = "#000";
    context.fillRect(0, 0, width, height);
    context.beginPath();
    context.moveTo(320, 0);
    context.lineTo(320, 480);
    context.lineWidth = 4;
    context.strokeStyle = "#fff";
    context.stroke();
    player.render();
    computer.render();
    return ball.render();
  };

  animate = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };

  move = function() {
    player.move();
    return computer.move();
  };

  step = function() {
    move();
    render();
    return animate(step);
  };

  window.addEventListener('keydown', function(event) {
    if (event.keyCode === 38) {
      player.goUp();
      return console.log("up");
    } else if (event.keyCode === 40) {
      player.goDown();
      return console.log("down");
    }
  });

  window.onload = function() {
    return animate(step);
  };

}).call(this);
