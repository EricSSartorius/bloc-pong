// Generated by CoffeeScript 1.7.1
(function() {
  var Ball, Computer, Paddle, Player, ball, canvas, computer, context, height, player, render, width;

  canvas = document.getElementById("canvas");

  width = 640;

  height = 480;

  canvas.width = width;

  canvas.height = height;

  context = canvas.getContext("2d");

  Paddle = function(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    return this.height = height;
  };

  Paddle.prototype.render = function() {
    context.fillStyle = 'white';
    return context.fillRect(this.x, this.y, this.width, this.height);
  };

  Player = function() {
    return this.paddle = new Paddle(10, 30, 10, 100);
  };

  Computer = function() {
    return this.paddle = new Paddle(620, 30, 10, 100);
  };

  Player.prototype.render = function() {
    return this.paddle.render();
  };

  Computer.prototype.render = function() {
    return this.paddle.render();
  };

  Ball = function(x, y) {
    this.x = x;
    this.y = y;
    return this.radius = 10;
  };

  Ball.prototype.render = function() {
    context.beginPath();
    context.arc(this.x, this.y, this.radius, 2 * Math.PI, false);
    context.fillStyle = 'white';
    return context.fill();
  };

  player = new Player;

  computer = new Computer;

  ball = new Ball(canvas.width / 4, canvas.height / 3);

  render = function() {
    var x, y;
    context.fillStyle = "#000";
    context.fillRect(0, 0, width, height);
    x = 0.5;
    while (x < 640) {
      context.moveTo(x, 0);
      context.lineTo(x, 480);
      x += 10;
    }
    y = 0.5;
    while (y < 480) {
      context.moveTo(0, y);
      context.lineTo(640, y);
      y += 10;
    }
    context.strokeStyle = "#666";
    context.stroke();
    context.beginPath();
    context.moveTo(320, 0);
    context.lineTo(320, 480);
    context.lineWidth = 4;
    context.strokeStyle = "#fff";
    context.stroke();
    player.render();
    computer.render();
    return ball.render();
  };

  window.onload = function() {
    return render();
  };

}).call(this);
